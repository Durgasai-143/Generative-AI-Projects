document.addEventListener('DOMContentLoaded', function () {
    const gridContainer = document.getElementById('grid-container');
    const scoreDisplay = document.getElementById('score');
    const gameOverDisplay = document.getElementById('game-over');
    const resetButton = document.getElementById('reset-button');

    let score = 0;
    let grid = new Array(4).fill(0).map(row => new Array(4).fill(0));

    function initializeGame() {
        grid = new Array(4).fill(0).map(row => new Array(4).fill(0));
        score = 0;
        updateGrid();
        generateRandomTile();
        generateRandomTile();
    }

    function generateRandomTile() {
        const availableCells = [];
        grid.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
                if (cell === 0) {
                    availableCells.push({ row: rowIndex, col: colIndex });
                }
            });
        });

        if (availableCells.length > 0) {
            const randomIndex = Math.floor(Math.random() * availableCells.length);
            const randomCell = availableCells[randomIndex];
            const newValue = Math.random() < 0.9 ? 2 : 4;

            grid[randomCell.row][randomCell.col] = newValue;
            updateGrid();
            checkGameOver();
        }
    }

    function updateGrid() {
        gridContainer.innerHTML = '';
        grid.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
                const tile = document.createElement('div');
                tile.classList.add('tile', `tile-${cell}`);
                tile.textContent = cell !== 0 ? cell : '';
                gridContainer.appendChild(tile);
            });
        });
        scoreDisplay.textContent = `Score: ${score}`;
        gameOverDisplay.textContent = ''; // Reset game over message
    }

    function move(direction) {
        const flipped = direction === 'right' || direction === 'down';
        const rotated = direction === 'up' || direction === 'down';

        // Transpose the grid for 'up' and 'down' movements
        if (rotated) {
            grid = transpose(grid);
        }

        // Flip the grid for 'right' and 'down' movements
        if (flipped) {
            grid.forEach(row => row.reverse());
        }

        let moved = false;

        for (let i = 0; i < 4; i++) {
            let row = grid[i].filter(cell => cell !== 0);
            let missing = 4 - row.length;
            let zeros = Array(missing).fill(0);
            let newRow = row.concat(zeros);

            for (let j = 0; j < 3; j++) {
                if (newRow[j] === newRow[j + 1] && newRow[j] !== 0) {
                    newRow[j] *= 2;
                    score += newRow[j];
                    newRow[j + 1] = 0;
                    moved = true;
                }
            }

            newRow = newRow.filter(cell => cell !== 0);
            newRow = newRow.concat(Array(4 - newRow.length).fill(0));

            if (!arraysEqual(grid[i], newRow)) {
                moved = true;
            }

            grid[i] = newRow;
        }

        // Reverse the flip/transpose for 'right' and 'down' movements
        if (flipped) {
            grid.forEach(row => row.reverse());
        }

        if (rotated) {
            grid = transpose(grid);
        }

        if (moved) {
            generateRandomTile();
        }

        updateGrid();
        checkGameOver();
    }

    function transpose(matrix) {
        return matrix[0].map((col, i) => matrix.map(row => row[i]));
    }

    function arraysEqual(arr1, arr2) {
        return JSON.stringify(arr1) === JSON.stringify(arr2);
    }

    function checkGameOver() {
        if (!canMove()) {
            gameOverDisplay.textContent = 'Game Over! No more moves.';
        }
    }

    function canMove() {
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                if (grid[i][j] === 0) {
                    return true;
                }

                if (j !== 3 && grid[i][j] === grid[i][j + 1]) {
                    return true;
                }

                if (i !== 3 && grid[i][j] === grid[i + 1][j]) {
                    return true;
                }
            }
        }
        return false;
    }

    // Handle keyboard events for arrow keys
    document.addEventListener('keydown', function (event) {
        switch (event.key) {
            case 'ArrowLeft':
                move('left');
                break;
            case 'ArrowRight':
                move('right');
                break;
            case 'ArrowUp':
                move('up');
                break;
            case 'ArrowDown':
                move('down');
                break;
        }
    });

    // Initialize the game by generating two random tiles
    initializeGame();

    // Reset the game when the "New Game" button is clicked
    resetButton.addEventListener('click', initializeGame);
});
